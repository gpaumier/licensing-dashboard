{"version":3,"sources":["app/application.js","app/columnChart.js","app/drawCharts.js","app/licensesOverTime.js","app/logColumnChart.js","app/preprocess.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhpNA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;ACAA;AAAA;AAAA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7LA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAAA","file":"public_html/lida.js","sourcesContent":["\"use strict\";\n\n//var drawCharts = require('drawCharts');\nvar preprocess = require('preprocess');\n\n\nvar App = {\n    init: function init() {\n        console.log('App initialized.');\n    },\n    runCharts: function runCharts() {\n        preprocess.preprocess('licensesOverTime.json');\n    }\n};\n\nmodule.exports = App;\n","/**\n * Generates a column chart based on a set of parameters\n * @param params {Object}\n */\n\nfunction draw (params) {\n\n    // Define the chart's parameters\n\n    var dataset = params.dataset;\n    var barPadding = 1;\n    var chartPadding = 30;\n    var axisPadding = 20;\n    var captionPadding = 20;\n\n    var margin = {\n        top: chartPadding + captionPadding,\n        right: chartPadding,\n        bottom: chartPadding + axisPadding + captionPadding,\n        left:chartPadding + axisPadding\n    }\n\n    var chartHeight = 500 - margin.top - margin.bottom;\n    var chartWidth = 800 - margin.left - margin.right;\n\n    // Create the scales\n\n    var xScale = params.xScale;\n\n    var yScale = params.yScale;\n\n    var domain = [\n        d3.min(\n            dataset,\n            function (d, i) {\n                return moment(d.key, 'YYYY-MM-DD')\n            }\n        ),\n        d3.max(\n            dataset,\n            function (d, i) {\n                return moment(d.key, 'YYYY-MM-DD')\n            }\n        )\n    ];\n\n    xScale\n        .domain(domain)\n        .range([0, chartWidth]);\n\n    yScale\n        .domain(\n            [\n                0,\n                d3.max(\n                    dataset,\n                    function (d, i) {\n                        return d.values;\n                    }\n                )\n            ]\n        )\n        .range([chartHeight, 0]);\n\n    // Set up the axes\n\n    var xAxis = d3.svg.axis();\n\n    var xFormatter = d3.format(\"f\");\n    var xFormatter2 = d3.format(\".1f\");\n\n    xAxis\n        .scale(xScale)\n        .orient('bottom');\n\n    var yAxis = d3.svg.axis();\n\n    yAxis\n        .scale(yScale)\n        .orient('left')\n        .ticks(5);\n\n    var yRefLines = d3.svg.axis();\n\n    yRefLines\n        .scale(yScale)\n        .orient('right')\n        .ticks(5)\n        .tickSize(chartWidth);\n\n    // Add zoom behavior\n\n    var zoom = d3.behavior.zoom()\n        .on('zoom', redraw);\n\n    zoom.x(xScale);\n\n    function redraw() {\n        gx.call(xAxis);\n        gy.call(yAxis);\n        bars\n            .attr('x', function (d, i) {\n                return xScale(moment(d.key, 'YYYY-MM-DD'));\n            })\n            .attr('width', Math.max(\n                (chartWidth / domainExtent) * d3.event.scale - barPadding,\n                2)\n            )\n    }\n\n    // Create the chart\n\n    var svg = d3.select(params.anchor).append('svg')\n        .attr(\"width\", chartWidth + margin.left + margin.right)\n        .attr(\"height\", chartHeight + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    svg.append(\"rect\")\n        .attr(\"class\", \"pane\")\n        .attr(\"width\", chartWidth)\n        .attr(\"height\", chartHeight)\n        .call(zoom);\n\n    // Create the bars\n\n    var domainExtent = domain[1].diff(domain[0], 'days');\n\n    var bars = svg\n        .selectAll('rect')\n        .data(dataset)\n        .enter()\n        .append('rect')\n        .attr('x', function (d, i) {\n            return xScale(moment(d.key, 'YYYY-MM-DD'));\n        })\n        .attr('y', function (d) {\n            return yScale(d.values);\n        })\n        .attr('width', Math.max(\n            chartWidth / domainExtent - barPadding,\n            2)\n        )\n        .attr('height', function (d) {\n            return chartHeight - yScale(d.values);\n        })\n        .attr(\"fill\", \"#1f78b4\")\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseout\", mouseout);\n\n    // Create the tooltip and show/hide it on mouse over/out.\n\n    var tooltip = d3.select(params.anchor).append(\"div\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 1e-6);\n\n    function mouseover(d) {\n        tooltip\n            .style(\"opacity\", 1)\n            .text(d.values + ' events on ' + d.key)\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 30) + \"px\");\n    }\n\n    function mouseout() {\n        tooltip.style(\"opacity\", 1e-6);\n    }\n\n    // Create the axes\n\n    var gYRefLines = svg\n        .append('g')\n        .attr(\"class\", \"axis refLines\")\n        .call(yRefLines);\n\n    gYRefLines.selectAll('g')\n        .classed('minor', true);\n\n    var gx = svg\n        .append('g')\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", \"translate(0,\" + chartHeight + \")\")\n        .call(xAxis);\n\n    var gy = svg\n        .append('g')\n        .attr(\"class\", \"axis\")\n        .call(yAxis);\n\n    // Create the captions of the axes\n\n    // x axis\n\n    svg\n        .append('text')\n        .text('Time')\n        .attr('x', chartWidth / 2)\n        .attr('y', chartHeight + axisPadding + chartPadding)\n        .attr('text-anchor', 'middle');\n\n    // y axis\n\n    svg\n        .append('text')\n        .text(params.yAxisLabel)\n        .attr('x', 0)\n        .attr('y', 0 - captionPadding)\n        .attr('text-anchor', 'left');\n\n}\n\nmodule.exports.draw = draw;\n","var columnChart = require('columnChart');\n//var overlappingColumnsChart = require('overlappingColumnsChart');\n//var logColumnChart = require('logColumnChart');\n\nfunction drawAll(preprocessed) {\n\n    d3.select('#uniqueTemplates')\n        .append('p')\n        .text(preprocessed['uniqueTemplates']);\n\n    d3.select('#uniqueTranscludedTemplates')\n        .append('p')\n        .text(preprocessed['uniqueTranscludedTemplates']);\n\n    d3.select('#unusedTemplates')\n        .append('p')\n        .text(preprocessed['unusedTemplates'].join(', '));\n\n\n    // Draw the charts\n\n    columnChart.draw({\n        'anchor': '#licensesOverTime',\n        'dataset': preprocessed['licensesOverTime']\n    });\n};\n\nmodule.exports.drawAll = drawAll;\n","","function draw(params) {\n    // Define the chart's parameters\n\n    console.log(params.dataset);\n\n    var barPadding = 1;\n    var chartPadding = 30;\n    var axisPadding = 20;\n    var captionPadding = 20;\n\n    var margin = {\n        top: chartPadding + captionPadding,\n        right: chartPadding,\n        bottom: chartPadding + axisPadding + captionPadding * 2,\n        left:chartPadding + axisPadding\n    }\n\n    var chartHeight = 500 - margin.top - margin.bottom;\n    var chartWidth = 800 - margin.left - margin.right;\n\n    // Create the scales\n\n    var xScale = d3.scale.log();\n\n    var powExponent = 0.5;\n\n    var yScale = d3.scale.pow().exponent(powExponent);\n\n    xScale\n        .domain(\n            [\n                1,\n                d3.max(\n                    params.dataset,\n                    function (d) {\n                        return d[0];\n                    }\n                )\n            ]\n        )\n        .range([0, chartWidth]);\n\n    yScale\n        .domain(\n            [\n                0,\n                d3.max(\n                    params.dataset,\n                    function (d) {\n                        return d[1];\n                    }\n                )\n            ]\n        )\n        .range([chartHeight, 0]);\n\n    // Set up the axes\n\n    var xAxis = d3.svg.axis();\n\n    var xFormatter = d3.format(\"f\");\n    var xFormatter2 = d3.format(\".1f\");\n\n    xAxis\n        .scale(xScale)\n        .orient('bottom')\n        .ticks(10, function (d) {\n            if (d < 30) {\n                return xFormatter(d) + 'd';\n            } else if (d < 365) {\n                return xFormatter(d / 30) + 'm';\n            } else {\n                return xFormatter(d / 365) + 'y';\n            }\n        });\n\n    var yAxis = d3.svg.axis();\n\n    yAxis\n        .scale(yScale)\n        .orient('left')\n        .ticks(5);\n\n    var yRefLines = d3.svg.axis();\n\n    yRefLines\n        .scale(yScale)\n        .orient('right')\n        .ticks(5)\n        .tickSize(chartWidth);\n\n    // Create the chart\n\n    var svg = d3.select(params.anchor).append('svg')\n        .attr(\"width\", chartWidth + margin.left + margin.right)\n        .attr(\"height\", chartHeight + margin.top + margin.bottom)\n        .append('g')\n        . attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    // Create the bars\n\n    svg\n        .selectAll('rect')\n        .data(params.dataset)\n        .enter()\n        .append('rect')\n        .attr('x', function (d, i) {\n            return xScale(d[0] + 1);\n        })\n        .attr('y', function (d) {\n            return yScale(d[1]);\n        })\n        .attr('width', chartWidth / params.dataset.length - barPadding)\n        .attr('height', function (d) {\n            return chartHeight - yScale(d[1]);\n        })\n        .attr(\"fill\", \"#1f78b4\")\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseout\", mouseout);\n\n    // Create the tooltip and show/hide it on mouse over/out.\n\n    var tooltip = d3.select(params.anchor).append(\"div\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 1e-6);\n\n    function mouseover(d) {\n        tooltip\n            .style(\"opacity\", 1)\n            .text(d[1] + ' revert(s) happened to users on day ' + (d[0] + 1))\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 30) + \"px\");\n    }\n\n    function mouseout() {\n        tooltip.style(\"opacity\", 1e-6);\n    }\n\n    // Create the axes\n\n    var gYRefLines = svg\n        .append('g')\n        .attr(\"class\", \"axis refLines\")\n        .call(yRefLines);\n\n    gYRefLines.selectAll('g')\n        .classed('minor', true);\n\n    var gx = svg\n        .append('g')\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", \"translate(0,\" + chartHeight + \")\")\n        .call(xAxis);\n\n    var gy = svg\n        .append('g')\n        .attr(\"class\", \"axis\")\n        .call(yAxis);\n\n    // Create the captions of the axes\n\n    // x axis\n\n    svg\n        .append('text')\n        .text('Nth day after user registration (logarithmic)')\n        .attr('x', chartWidth / 2)\n        .attr('y', chartHeight + axisPadding + chartPadding)\n        .attr('text-anchor', 'middle');\n\n    svg\n        .append('text')\n        .text('(d: days; m: months; y: years)')\n        .attr('x', chartWidth / 2)\n        .attr('y', chartHeight + axisPadding + chartPadding + captionPadding)\n        .attr('text-anchor', 'middle');\n\n    // y axis\n\n    svg\n        .append('text')\n        .text('Number of reverts (scale ^' + powExponent + ')')\n        .attr('x', 0)\n        .attr('y', 0 - captionPadding)\n        .attr('text-anchor', 'left');\n\n};\n\nmodule.exports.draw = draw;\n","var drawCharts = require('drawCharts');\n\n/**\n * Things to do:\n * * Remove templates with no files in any year\n * * Filter with template blacklist (e.g. {{self}})\n * * Calculate the total number of files with each template\n *   * Get the top 10 / 100\n * * Define regular expressions to group templates by category: e.g. (cc-*|PD-CC-*) => Creative Commons\n */\n\nfunction preprocess(JSONFilename) {\n    d3.json(JSONFilename, function processJSON (json) {\n\n        console.log(json);\n\n        var preprocessed = {\n            'byLicense': {},\n            'byYear': {},\n            'unusedTemplates': []\n        };\n\n        // Convert data to D3 maps, recursively\n\n        var data = d3.map(json);\n        data.forEach(function (license, years) {\n            this.set(license, d3.map(years));\n        });\n\n        // Calculate how many files have each license\n        // Also remove templates with no transclusions\n\n        preprocessed['uniqueTemplates'] = data.keys().length;\n\n        data.forEach(function (license, years) {\n            preprocessed['byLicense'][license] = d3.sum(years.values());\n            if (!preprocessed['byLicense'][license]) {\n                data.remove(license);\n                preprocessed['unusedTemplates'].push(license);\n            };\n        });\n\n        preprocessed['uniqueTranscludedTemplates'] = data.keys().length;\n        preprocessed['licensesOverTime'] = data;\n\n        // Calculate how many licenses are trancluded by files uploaded each year\n\n        for (var year = 2004; year < 2016; year++) {\n            preprocessed['byYear'][year] = 0;\n\n            data.forEach(function (license, years) {\n                preprocessed['byYear'][year] += years.get(year);\n            });\n        };\n\n        drawCharts.drawAll(preprocessed);\n\n    });\n}\nmodule.exports.preprocess = preprocess;\n"]}